// Code generated by protoc-gen-go. DO NOT EDIT.
// source: govalidator.proto

/*
Package gwproto is a generated protocol buffer package.

It is generated from these files:
	govalidator.proto

It has these top-level messages:
	FieldValidator
*/
package gwproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FieldValidator struct {
	IsAscii              *bool  `protobuf:"varint,1,opt,name=is_ascii,json=isAscii" json:"is_ascii,omitempty"`
	IsAlpha              *bool  `protobuf:"varint,2,opt,name=is_alpha,json=isAlpha" json:"is_alpha,omitempty"`
	IsAlphanumeric       *bool  `protobuf:"varint,3,opt,name=is_alphanumeric,json=isAlphanumeric" json:"is_alphanumeric,omitempty"`
	IsBase64             *bool  `protobuf:"varint,4,opt,name=is_base64,json=isBase64" json:"is_base64,omitempty"`
	IsCidr               *bool  `protobuf:"varint,5,opt,name=is_cidr,json=isCidr" json:"is_cidr,omitempty"`
	IsCreditcard         *bool  `protobuf:"varint,6,opt,name=is_creditcard,json=isCreditcard" json:"is_creditcard,omitempty"`
	IsDnsname            *bool  `protobuf:"varint,7,opt,name=is_dnsname,json=isDnsname" json:"is_dnsname,omitempty"`
	IsDatauri            *bool  `protobuf:"varint,8,opt,name=is_datauri,json=isDatauri" json:"is_datauri,omitempty"`
	IsDialstring         *bool  `protobuf:"varint,9,opt,name=is_dialstring,json=isDialstring" json:"is_dialstring,omitempty"`
	IsEmail              *bool  `protobuf:"varint,10,opt,name=is_email,json=isEmail" json:"is_email,omitempty"`
	IsHexadecimal        *bool  `protobuf:"varint,11,opt,name=is_hexadecimal,json=isHexadecimal" json:"is_hexadecimal,omitempty"`
	IsHexcolor           *bool  `protobuf:"varint,12,opt,name=is_hexcolor,json=isHexcolor" json:"is_hexcolor,omitempty"`
	IsHost               *bool  `protobuf:"varint,13,opt,name=is_host,json=isHost" json:"is_host,omitempty"`
	IsIp                 *bool  `protobuf:"varint,14,opt,name=is_ip,json=isIp" json:"is_ip,omitempty"`
	IsIpv4               *bool  `protobuf:"varint,15,opt,name=is_ipv4,json=isIpv4" json:"is_ipv4,omitempty"`
	IsIpv6               *bool  `protobuf:"varint,16,opt,name=is_ipv6,json=isIpv6" json:"is_ipv6,omitempty"`
	IsIsbn10             *bool  `protobuf:"varint,17,opt,name=is_isbn10,json=isIsbn10" json:"is_isbn10,omitempty"`
	IsIsbn13             *bool  `protobuf:"varint,18,opt,name=is_isbn13,json=isIsbn13" json:"is_isbn13,omitempty"`
	IsIso3166Alpha2      *bool  `protobuf:"varint,19,opt,name=is_iso3166alpha2,json=isIso3166alpha2" json:"is_iso3166alpha2,omitempty"`
	IsIso3166Alpha3      *bool  `protobuf:"varint,20,opt,name=is_iso3166alpha3,json=isIso3166alpha3" json:"is_iso3166alpha3,omitempty"`
	IsIso693Alpha2       *bool  `protobuf:"varint,21,opt,name=is_iso693alpha2,json=isIso693alpha2" json:"is_iso693alpha2,omitempty"`
	IsIso693Alpha3B      *bool  `protobuf:"varint,22,opt,name=is_iso693alpha3b,json=isIso693alpha3b" json:"is_iso693alpha3b,omitempty"`
	IsIso4217            *bool  `protobuf:"varint,23,opt,name=is_iso4217,json=isIso4217" json:"is_iso4217,omitempty"`
	IsJson               *bool  `protobuf:"varint,24,opt,name=is_json,json=isJson" json:"is_json,omitempty"`
	IsLatitude           *bool  `protobuf:"varint,25,opt,name=is_latitude,json=isLatitude" json:"is_latitude,omitempty"`
	IsLongitude          *bool  `protobuf:"varint,26,opt,name=is_longitude,json=isLongitude" json:"is_longitude,omitempty"`
	IsLowercase          *bool  `protobuf:"varint,27,opt,name=is_lowercase,json=isLowercase" json:"is_lowercase,omitempty"`
	IsMac                *bool  `protobuf:"varint,28,opt,name=is_mac,json=isMac" json:"is_mac,omitempty"`
	IsMongoid            *bool  `protobuf:"varint,29,opt,name=is_mongoid,json=isMongoid" json:"is_mongoid,omitempty"`
	IsMultibyte          *bool  `protobuf:"varint,30,opt,name=is_multibyte,json=isMultibyte" json:"is_multibyte,omitempty"`
	IsNull               *bool  `protobuf:"varint,31,opt,name=is_null,json=isNull" json:"is_null,omitempty"`
	IsNumeric            *bool  `protobuf:"varint,32,opt,name=is_numeric,json=isNumeric" json:"is_numeric,omitempty"`
	IsPort               *bool  `protobuf:"varint,33,opt,name=is_port,json=isPort" json:"is_port,omitempty"`
	IsPrintableascii     *bool  `protobuf:"varint,34,opt,name=is_printableascii,json=isPrintableascii" json:"is_printableascii,omitempty"`
	IsRfc3339            *bool  `protobuf:"varint,35,opt,name=is_rfc3339,json=isRfc3339" json:"is_rfc3339,omitempty"`
	IsRfc3339Withoutzone *bool  `protobuf:"varint,36,opt,name=is_rfc3339withoutzone,json=isRfc3339withoutzone" json:"is_rfc3339withoutzone,omitempty"`
	IsRgbcolor           *bool  `protobuf:"varint,37,opt,name=is_rgbcolor,json=isRgbcolor" json:"is_rgbcolor,omitempty"`
	IsRequesturi         *bool  `protobuf:"varint,38,opt,name=is_requesturi,json=isRequesturi" json:"is_requesturi,omitempty"`
	IsRequesturl         *bool  `protobuf:"varint,39,opt,name=is_requesturl,json=isRequesturl" json:"is_requesturl,omitempty"`
	IsSsn                *bool  `protobuf:"varint,40,opt,name=is_ssn,json=isSsn" json:"is_ssn,omitempty"`
	IsSemver             *bool  `protobuf:"varint,41,opt,name=is_semver,json=isSemver" json:"is_semver,omitempty"`
	IsUrl                *bool  `protobuf:"varint,42,opt,name=is_url,json=isUrl" json:"is_url,omitempty"`
	IsUtfdugit           *bool  `protobuf:"varint,43,opt,name=is_utfdugit,json=isUtfdugit" json:"is_utfdugit,omitempty"`
	IsUtfletter          *bool  `protobuf:"varint,44,opt,name=is_utfletter,json=isUtfletter" json:"is_utfletter,omitempty"`
	IsUtfnumeric         *bool  `protobuf:"varint,45,opt,name=is_utfnumeric,json=isUtfnumeric" json:"is_utfnumeric,omitempty"`
	IsUuid               *bool  `protobuf:"varint,46,opt,name=is_uuid,json=isUuid" json:"is_uuid,omitempty"`
	IsUuidv3             *bool  `protobuf:"varint,47,opt,name=is_uuidv3,json=isUuidv3" json:"is_uuidv3,omitempty"`
	IsUuidv4             *bool  `protobuf:"varint,48,opt,name=is_uuidv4,json=isUuidv4" json:"is_uuidv4,omitempty"`
	IsUuidv5             *bool  `protobuf:"varint,49,opt,name=is_uuidv5,json=isUuidv5" json:"is_uuidv5,omitempty"`
	IsUppercase          *bool  `protobuf:"varint,50,opt,name=is_uppercase,json=isUppercase" json:"is_uppercase,omitempty"`
	IsVariablewidth      *bool  `protobuf:"varint,51,opt,name=is_variablewidth,json=isVariablewidth" json:"is_variablewidth,omitempty"`
	XXX_unrecognized     []byte `json:"-"`
}

func (m *FieldValidator) Reset()                    { *m = FieldValidator{} }
func (m *FieldValidator) String() string            { return proto.CompactTextString(m) }
func (*FieldValidator) ProtoMessage()               {}
func (*FieldValidator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FieldValidator) GetIsAscii() bool {
	if m != nil && m.IsAscii != nil {
		return *m.IsAscii
	}
	return false
}

func (m *FieldValidator) GetIsAlpha() bool {
	if m != nil && m.IsAlpha != nil {
		return *m.IsAlpha
	}
	return false
}

func (m *FieldValidator) GetIsAlphanumeric() bool {
	if m != nil && m.IsAlphanumeric != nil {
		return *m.IsAlphanumeric
	}
	return false
}

func (m *FieldValidator) GetIsBase64() bool {
	if m != nil && m.IsBase64 != nil {
		return *m.IsBase64
	}
	return false
}

func (m *FieldValidator) GetIsCidr() bool {
	if m != nil && m.IsCidr != nil {
		return *m.IsCidr
	}
	return false
}

func (m *FieldValidator) GetIsCreditcard() bool {
	if m != nil && m.IsCreditcard != nil {
		return *m.IsCreditcard
	}
	return false
}

func (m *FieldValidator) GetIsDnsname() bool {
	if m != nil && m.IsDnsname != nil {
		return *m.IsDnsname
	}
	return false
}

func (m *FieldValidator) GetIsDatauri() bool {
	if m != nil && m.IsDatauri != nil {
		return *m.IsDatauri
	}
	return false
}

func (m *FieldValidator) GetIsDialstring() bool {
	if m != nil && m.IsDialstring != nil {
		return *m.IsDialstring
	}
	return false
}

func (m *FieldValidator) GetIsEmail() bool {
	if m != nil && m.IsEmail != nil {
		return *m.IsEmail
	}
	return false
}

func (m *FieldValidator) GetIsHexadecimal() bool {
	if m != nil && m.IsHexadecimal != nil {
		return *m.IsHexadecimal
	}
	return false
}

func (m *FieldValidator) GetIsHexcolor() bool {
	if m != nil && m.IsHexcolor != nil {
		return *m.IsHexcolor
	}
	return false
}

func (m *FieldValidator) GetIsHost() bool {
	if m != nil && m.IsHost != nil {
		return *m.IsHost
	}
	return false
}

func (m *FieldValidator) GetIsIp() bool {
	if m != nil && m.IsIp != nil {
		return *m.IsIp
	}
	return false
}

func (m *FieldValidator) GetIsIpv4() bool {
	if m != nil && m.IsIpv4 != nil {
		return *m.IsIpv4
	}
	return false
}

func (m *FieldValidator) GetIsIpv6() bool {
	if m != nil && m.IsIpv6 != nil {
		return *m.IsIpv6
	}
	return false
}

func (m *FieldValidator) GetIsIsbn10() bool {
	if m != nil && m.IsIsbn10 != nil {
		return *m.IsIsbn10
	}
	return false
}

func (m *FieldValidator) GetIsIsbn13() bool {
	if m != nil && m.IsIsbn13 != nil {
		return *m.IsIsbn13
	}
	return false
}

func (m *FieldValidator) GetIsIso3166Alpha2() bool {
	if m != nil && m.IsIso3166Alpha2 != nil {
		return *m.IsIso3166Alpha2
	}
	return false
}

func (m *FieldValidator) GetIsIso3166Alpha3() bool {
	if m != nil && m.IsIso3166Alpha3 != nil {
		return *m.IsIso3166Alpha3
	}
	return false
}

func (m *FieldValidator) GetIsIso693Alpha2() bool {
	if m != nil && m.IsIso693Alpha2 != nil {
		return *m.IsIso693Alpha2
	}
	return false
}

func (m *FieldValidator) GetIsIso693Alpha3B() bool {
	if m != nil && m.IsIso693Alpha3B != nil {
		return *m.IsIso693Alpha3B
	}
	return false
}

func (m *FieldValidator) GetIsIso4217() bool {
	if m != nil && m.IsIso4217 != nil {
		return *m.IsIso4217
	}
	return false
}

func (m *FieldValidator) GetIsJson() bool {
	if m != nil && m.IsJson != nil {
		return *m.IsJson
	}
	return false
}

func (m *FieldValidator) GetIsLatitude() bool {
	if m != nil && m.IsLatitude != nil {
		return *m.IsLatitude
	}
	return false
}

func (m *FieldValidator) GetIsLongitude() bool {
	if m != nil && m.IsLongitude != nil {
		return *m.IsLongitude
	}
	return false
}

func (m *FieldValidator) GetIsLowercase() bool {
	if m != nil && m.IsLowercase != nil {
		return *m.IsLowercase
	}
	return false
}

func (m *FieldValidator) GetIsMac() bool {
	if m != nil && m.IsMac != nil {
		return *m.IsMac
	}
	return false
}

func (m *FieldValidator) GetIsMongoid() bool {
	if m != nil && m.IsMongoid != nil {
		return *m.IsMongoid
	}
	return false
}

func (m *FieldValidator) GetIsMultibyte() bool {
	if m != nil && m.IsMultibyte != nil {
		return *m.IsMultibyte
	}
	return false
}

func (m *FieldValidator) GetIsNull() bool {
	if m != nil && m.IsNull != nil {
		return *m.IsNull
	}
	return false
}

func (m *FieldValidator) GetIsNumeric() bool {
	if m != nil && m.IsNumeric != nil {
		return *m.IsNumeric
	}
	return false
}

func (m *FieldValidator) GetIsPort() bool {
	if m != nil && m.IsPort != nil {
		return *m.IsPort
	}
	return false
}

func (m *FieldValidator) GetIsPrintableascii() bool {
	if m != nil && m.IsPrintableascii != nil {
		return *m.IsPrintableascii
	}
	return false
}

func (m *FieldValidator) GetIsRfc3339() bool {
	if m != nil && m.IsRfc3339 != nil {
		return *m.IsRfc3339
	}
	return false
}

func (m *FieldValidator) GetIsRfc3339Withoutzone() bool {
	if m != nil && m.IsRfc3339Withoutzone != nil {
		return *m.IsRfc3339Withoutzone
	}
	return false
}

func (m *FieldValidator) GetIsRgbcolor() bool {
	if m != nil && m.IsRgbcolor != nil {
		return *m.IsRgbcolor
	}
	return false
}

func (m *FieldValidator) GetIsRequesturi() bool {
	if m != nil && m.IsRequesturi != nil {
		return *m.IsRequesturi
	}
	return false
}

func (m *FieldValidator) GetIsRequesturl() bool {
	if m != nil && m.IsRequesturl != nil {
		return *m.IsRequesturl
	}
	return false
}

func (m *FieldValidator) GetIsSsn() bool {
	if m != nil && m.IsSsn != nil {
		return *m.IsSsn
	}
	return false
}

func (m *FieldValidator) GetIsSemver() bool {
	if m != nil && m.IsSemver != nil {
		return *m.IsSemver
	}
	return false
}

func (m *FieldValidator) GetIsUrl() bool {
	if m != nil && m.IsUrl != nil {
		return *m.IsUrl
	}
	return false
}

func (m *FieldValidator) GetIsUtfdugit() bool {
	if m != nil && m.IsUtfdugit != nil {
		return *m.IsUtfdugit
	}
	return false
}

func (m *FieldValidator) GetIsUtfletter() bool {
	if m != nil && m.IsUtfletter != nil {
		return *m.IsUtfletter
	}
	return false
}

func (m *FieldValidator) GetIsUtfnumeric() bool {
	if m != nil && m.IsUtfnumeric != nil {
		return *m.IsUtfnumeric
	}
	return false
}

func (m *FieldValidator) GetIsUuid() bool {
	if m != nil && m.IsUuid != nil {
		return *m.IsUuid
	}
	return false
}

func (m *FieldValidator) GetIsUuidv3() bool {
	if m != nil && m.IsUuidv3 != nil {
		return *m.IsUuidv3
	}
	return false
}

func (m *FieldValidator) GetIsUuidv4() bool {
	if m != nil && m.IsUuidv4 != nil {
		return *m.IsUuidv4
	}
	return false
}

func (m *FieldValidator) GetIsUuidv5() bool {
	if m != nil && m.IsUuidv5 != nil {
		return *m.IsUuidv5
	}
	return false
}

func (m *FieldValidator) GetIsUppercase() bool {
	if m != nil && m.IsUppercase != nil {
		return *m.IsUppercase
	}
	return false
}

func (m *FieldValidator) GetIsVariablewidth() bool {
	if m != nil && m.IsVariablewidth != nil {
		return *m.IsVariablewidth
	}
	return false
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*FieldValidator)(nil),
	Field:         49210,
	Name:          "govalidator.field",
	Tag:           "bytes,49210,opt,name=field",
	Filename:      "govalidator.proto",
}

func init() {
	proto.RegisterType((*FieldValidator)(nil), "govalidator.FieldValidator")
	proto.RegisterExtension(E_Field)
}

func init() { proto.RegisterFile("govalidator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0x5f, 0x93, 0x13, 0x45,
	0x14, 0xc5, 0x0b, 0x65, 0xff, 0xf5, 0xfe, 0x1f, 0x58, 0xb9, 0xb0, 0xae, 0x2c, 0x20, 0x02, 0xe2,
	0x26, 0xec, 0x4e, 0x88, 0x85, 0x6f, 0x02, 0x2a, 0xb1, 0x58, 0xa4, 0x42, 0x85, 0x07, 0x5f, 0x52,
	0x9d, 0x99, 0xce, 0xe4, 0x5a, 0x9d, 0xe9, 0xb1, 0x6f, 0x4f, 0x56, 0x7d, 0xf2, 0x73, 0xf9, 0xd5,
	0x7c, 0xb1, 0xa6, 0xa7, 0xef, 0x64, 0x56, 0x78, 0xec, 0xdf, 0x39, 0x7d, 0xe7, 0xa6, 0x4f, 0xdf,
	0xb4, 0xd8, 0xcf, 0xcc, 0x42, 0x6a, 0x4c, 0xa5, 0x33, 0xb6, 0x53, 0x58, 0xe3, 0x4c, 0xb4, 0xd9,
	0x42, 0xb7, 0x8e, 0x33, 0x63, 0x32, 0xad, 0xba, 0x5e, 0x9a, 0x94, 0xd3, 0x6e, 0xaa, 0x28, 0xb1,
	0x58, 0x34, 0xf6, 0xbb, 0xff, 0x6e, 0x89, 0x9d, 0x1f, 0x51, 0xe9, 0xf4, 0x3d, 0x6f, 0x8a, 0x6e,
	0x8a, 0x75, 0xa4, 0xb1, 0xa4, 0x04, 0x11, 0xae, 0x1c, 0x5f, 0x79, 0xb8, 0x3e, 0x5c, 0x43, 0xfa,
	0xbe, 0x5a, 0xb2, 0xa4, 0x8b, 0x99, 0x84, 0x4f, 0x1a, 0xa9, 0x5a, 0x46, 0x0f, 0xc4, 0x2e, 0x4b,
	0x79, 0x39, 0x57, 0x16, 0x13, 0xf8, 0xd4, 0x3b, 0x76, 0x82, 0x23, 0xd0, 0xe8, 0x50, 0x6c, 0x20,
	0x8d, 0x27, 0x92, 0x54, 0xbf, 0x07, 0x57, 0xbd, 0x65, 0x1d, 0xe9, 0xb9, 0x5f, 0x47, 0x37, 0xc4,
	0x1a, 0xd2, 0x38, 0xc1, 0xd4, 0xc2, 0x8a, 0x97, 0x56, 0x91, 0x5e, 0x60, 0x6a, 0xa3, 0x7b, 0x62,
	0xbb, 0x12, 0xac, 0x4a, 0xd1, 0x25, 0xd2, 0xa6, 0xb0, 0xea, 0xe5, 0x2d, 0xa4, 0x17, 0x0d, 0x8b,
	0x8e, 0x84, 0x40, 0x1a, 0xa7, 0x39, 0xe5, 0x72, 0xae, 0x60, 0xcd, 0x3b, 0x36, 0x90, 0x5e, 0xd6,
	0x80, 0x65, 0xe9, 0x64, 0x69, 0x11, 0xd6, 0x1b, 0xb9, 0x06, 0xe1, 0x13, 0x29, 0x4a, 0x4d, 0xce,
	0x62, 0x9e, 0xc1, 0x06, 0x7f, 0xe2, 0x65, 0xc3, 0xc2, 0x09, 0xa8, 0xb9, 0x44, 0x0d, 0x82, 0x4f,
	0xe0, 0x87, 0x6a, 0x19, 0xdd, 0x17, 0x3b, 0x48, 0xe3, 0x99, 0xfa, 0x43, 0xa6, 0x2a, 0xc1, 0xb9,
	0xd4, 0xb0, 0xe9, 0x0d, 0xdb, 0x48, 0xaf, 0x96, 0x30, 0xba, 0x2d, 0x36, 0x6b, 0x5b, 0x62, 0xb4,
	0xb1, 0xb0, 0xe5, 0x3d, 0xc2, 0x7b, 0x3c, 0x09, 0x67, 0x30, 0x33, 0xe4, 0x60, 0x9b, 0xcf, 0xe0,
	0x95, 0x21, 0x17, 0x5d, 0x13, 0x2b, 0x48, 0x63, 0x2c, 0x60, 0xc7, 0xe3, 0xab, 0x48, 0x83, 0x22,
	0xb8, 0xb1, 0x58, 0xf4, 0x60, 0x97, 0xdd, 0x83, 0x62, 0xd1, 0x5b, 0x0a, 0x7d, 0xd8, 0x6b, 0x09,
	0xfd, 0x10, 0x00, 0xd2, 0x24, 0x3f, 0x7d, 0x02, 0xfb, 0x1c, 0xc0, 0xc0, 0xaf, 0xdb, 0x62, 0x0c,
	0xd1, 0x25, 0x31, 0x8e, 0x1e, 0x89, 0x3d, 0x2f, 0x9a, 0xf8, 0xb4, 0xdf, 0xf7, 0x51, 0x9f, 0xc1,
	0x35, 0xef, 0xd9, 0xad, 0x3c, 0x2d, 0xfc, 0x11, 0x6b, 0x0c, 0xd7, 0x3f, 0x66, 0x8d, 0xc3, 0xcd,
	0x41, 0x32, 0xfd, 0x67, 0x71, 0x28, 0x7a, 0xc0, 0x37, 0x67, 0xd0, 0xa2, 0xcb, 0x9a, 0x8c, 0xe2,
	0x09, 0x7c, 0xd6, 0xaa, 0xb9, 0xc4, 0x21, 0x6a, 0x24, 0xd3, 0x3b, 0x3b, 0xfd, 0x16, 0x6e, 0x70,
	0xd4, 0x83, 0x1a, 0x84, 0xb3, 0xf9, 0x8d, 0x4c, 0x0e, 0xc0, 0x67, 0xf3, 0x33, 0x99, 0x3c, 0x84,
	0xa3, 0xa5, 0x43, 0x57, 0xa6, 0x0a, 0x6e, 0x72, 0x38, 0xaf, 0x03, 0x89, 0xee, 0x88, 0xad, 0xca,
	0x60, 0xf2, 0xac, 0x76, 0xdc, 0xf2, 0x8e, 0x4d, 0xa4, 0xd7, 0x8c, 0x1a, 0xcb, 0x85, 0xb2, 0x89,
	0x24, 0x05, 0x87, 0x4b, 0x4b, 0x40, 0xd1, 0x81, 0x58, 0x45, 0x1a, 0xcf, 0x65, 0x02, 0x9f, 0x7b,
	0x71, 0x05, 0xe9, 0x5c, 0x26, 0xa1, 0xeb, 0xb9, 0xc9, 0x33, 0x83, 0x29, 0x1c, 0x71, 0xd7, 0xe7,
	0x35, 0x08, 0x85, 0xe7, 0xa5, 0x76, 0x38, 0xf9, 0xd3, 0x29, 0xf8, 0x82, 0x0b, 0x9f, 0x33, 0x0a,
	0x3f, 0x2c, 0x2f, 0xb5, 0x86, 0xdb, 0xfc, 0xc3, 0xde, 0x94, 0x5a, 0x87, 0xd2, 0x3c, 0x99, 0xc7,
	0x5c, 0xfa, 0x4d, 0x18, 0xca, 0x7a, 0x5f, 0x61, 0xac, 0x83, 0x3b, 0xbc, 0xef, 0xad, 0xb1, 0x2e,
	0x7a, 0x2c, 0xf6, 0x2b, 0xc1, 0x62, 0xee, 0xe4, 0x44, 0xab, 0xfa, 0x5f, 0xe1, 0xae, 0xb7, 0xec,
	0x21, 0xbd, 0xbd, 0xc4, 0xc3, 0x47, 0xec, 0x34, 0x89, 0xe3, 0xf8, 0x19, 0xdc, 0xe3, 0x8f, 0x0c,
	0x6b, 0x10, 0xc5, 0xe2, 0x60, 0x29, 0x5f, 0xa0, 0x9b, 0x99, 0xd2, 0xfd, 0x65, 0x72, 0x05, 0x5f,
	0x7a, 0xe7, 0xf5, 0xc6, 0xd9, 0xd2, 0x42, 0x22, 0x36, 0x9b, 0xd4, 0xe3, 0x72, 0x9f, 0x13, 0x19,
	0x06, 0x12, 0xc6, 0xd6, 0xaa, 0xdf, 0x4b, 0x45, 0xae, 0x1a, 0xec, 0xaf, 0x78, 0x6c, 0x87, 0x0d,
	0xfb, 0xbf, 0x49, 0xc3, 0x83, 0x0f, 0x4c, 0x3a, 0xa4, 0x42, 0x94, 0xc3, 0x43, 0x4e, 0xe5, 0x1d,
	0xe5, 0x61, 0x24, 0x48, 0xcd, 0x17, 0xca, 0xc2, 0x23, 0x1e, 0x89, 0x77, 0x7e, 0x1d, 0xf6, 0x54,
	0x15, 0xbf, 0xe6, 0x3d, 0x23, 0xcb, 0x43, 0x5e, 0xba, 0x69, 0x5a, 0x66, 0xe8, 0xe0, 0x31, 0x77,
	0x3d, 0x0a, 0x24, 0x64, 0x59, 0xba, 0xa9, 0x56, 0xce, 0x29, 0x0b, 0xdf, 0x70, 0x96, 0x23, 0x46,
	0xa1, 0xe7, 0xd2, 0x4d, 0x39, 0xb5, 0x13, 0xee, 0x79, 0xd4, 0xb0, 0x10, 0x5c, 0x59, 0x62, 0x0a,
	0x1d, 0x0e, 0x6e, 0x54, 0x62, 0x1a, 0xba, 0xae, 0x84, 0x45, 0x0c, 0x5d, 0xee, 0x7a, 0xe4, 0xd7,
	0x6d, 0xb1, 0x07, 0x4f, 0x2e, 0x89, 0xbd, 0xb6, 0xf8, 0x14, 0x4e, 0x2f, 0x89, 0x4f, 0xb9, 0xef,
	0xa2, 0x08, 0x97, 0xfb, 0xac, 0xe9, 0x9b, 0x51, 0x18, 0xd3, 0x85, 0xb4, 0x58, 0xdd, 0x8c, 0x0b,
	0x4c, 0xdd, 0x0c, 0x62, 0x1e, 0xd3, 0xf7, 0x6d, 0xfc, 0xdd, 0x50, 0xac, 0x4c, 0xab, 0xc7, 0x27,
	0x3a, 0xea, 0xd4, 0x2f, 0x55, 0x87, 0x5f, 0xaa, 0x8e, 0x7f, 0x94, 0x7e, 0x29, 0x1c, 0x9a, 0x9c,
	0xe0, 0x9f, 0xbf, 0xab, 0xb7, 0x64, 0xf3, 0xec, 0xb0, 0xd3, 0x7e, 0xf0, 0x2e, 0xbf, 0x5b, 0xc3,
	0xba, 0xd4, 0xf3, 0xc1, 0xaf, 0x3f, 0x65, 0xe8, 0x66, 0xe5, 0xa4, 0x93, 0x98, 0x79, 0x77, 0x28,
	0xf3, 0x4c, 0xe9, 0xa1, 0x92, 0x5a, 0x75, 0xa7, 0xbe, 0xf8, 0xc9, 0x85, 0x95, 0xc5, 0x49, 0x53,
	0xe5, 0xa4, 0x55, 0xb1, 0x9b, 0x99, 0x4a, 0xec, 0x66, 0x17, 0xde, 0xf9, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x58, 0xa3, 0x8a, 0x7f, 0x5f, 0x07, 0x00, 0x00,
}
