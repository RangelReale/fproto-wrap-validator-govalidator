// Code generated by protoc-gen-go. DO NOT EDIT.
// source: govalidator.proto

/*
Package gwproto is a generated protocol buffer package.

It is generated from these files:
	govalidator.proto

It has these top-level messages:
	FieldValidator
*/
package gwproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FieldValidator struct {
	Ascii              bool `protobuf:"varint,1,opt,name=ascii" json:"ascii,omitempty"`
	Alpha              bool `protobuf:"varint,2,opt,name=alpha" json:"alpha,omitempty"`
	Alphanumeric       bool `protobuf:"varint,3,opt,name=alphanumeric" json:"alphanumeric,omitempty"`
	Base64             bool `protobuf:"varint,4,opt,name=base64" json:"base64,omitempty"`
	Cidr               bool `protobuf:"varint,5,opt,name=cidr" json:"cidr,omitempty"`
	Creditcard         bool `protobuf:"varint,6,opt,name=creditcard" json:"creditcard,omitempty"`
	Dnsname            bool `protobuf:"varint,7,opt,name=dnsname" json:"dnsname,omitempty"`
	Datauri            bool `protobuf:"varint,8,opt,name=datauri" json:"datauri,omitempty"`
	Dialstring         bool `protobuf:"varint,9,opt,name=dialstring" json:"dialstring,omitempty"`
	Email              bool `protobuf:"varint,10,opt,name=email" json:"email,omitempty"`
	Hexadecimal        bool `protobuf:"varint,11,opt,name=hexadecimal" json:"hexadecimal,omitempty"`
	Hexcolor           bool `protobuf:"varint,12,opt,name=hexcolor" json:"hexcolor,omitempty"`
	Host               bool `protobuf:"varint,13,opt,name=host" json:"host,omitempty"`
	Ip                 bool `protobuf:"varint,14,opt,name=ip" json:"ip,omitempty"`
	Ipv4               bool `protobuf:"varint,15,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6               bool `protobuf:"varint,16,opt,name=ipv6" json:"ipv6,omitempty"`
	Isbn10             bool `protobuf:"varint,17,opt,name=isbn10" json:"isbn10,omitempty"`
	Isbn13             bool `protobuf:"varint,18,opt,name=isbn13" json:"isbn13,omitempty"`
	Iso3166Alpha2      bool `protobuf:"varint,19,opt,name=iso3166alpha2" json:"iso3166alpha2,omitempty"`
	Iso3166Alpha3      bool `protobuf:"varint,20,opt,name=iso3166alpha3" json:"iso3166alpha3,omitempty"`
	Iso693Alpha2       bool `protobuf:"varint,21,opt,name=iso693alpha2" json:"iso693alpha2,omitempty"`
	Iso693Alpha3B      bool `protobuf:"varint,22,opt,name=iso693alpha3b" json:"iso693alpha3b,omitempty"`
	Iso4217            bool `protobuf:"varint,23,opt,name=iso4217" json:"iso4217,omitempty"`
	Json               bool `protobuf:"varint,24,opt,name=json" json:"json,omitempty"`
	Latitude           bool `protobuf:"varint,25,opt,name=latitude" json:"latitude,omitempty"`
	Longitude          bool `protobuf:"varint,26,opt,name=longitude" json:"longitude,omitempty"`
	Lowercase          bool `protobuf:"varint,27,opt,name=lowercase" json:"lowercase,omitempty"`
	Mac                bool `protobuf:"varint,28,opt,name=mac" json:"mac,omitempty"`
	Mongoid            bool `protobuf:"varint,29,opt,name=mongoid" json:"mongoid,omitempty"`
	Multibyte          bool `protobuf:"varint,30,opt,name=multibyte" json:"multibyte,omitempty"`
	Null               bool `protobuf:"varint,31,opt,name=null" json:"null,omitempty"`
	Numeric            bool `protobuf:"varint,32,opt,name=numeric" json:"numeric,omitempty"`
	Port               bool `protobuf:"varint,33,opt,name=port" json:"port,omitempty"`
	Printableascii     bool `protobuf:"varint,34,opt,name=printableascii" json:"printableascii,omitempty"`
	Rfc3339            bool `protobuf:"varint,35,opt,name=rfc3339" json:"rfc3339,omitempty"`
	Rfc3339Withoutzone bool `protobuf:"varint,36,opt,name=rfc3339withoutzone" json:"rfc3339withoutzone,omitempty"`
	Rgbcolor           bool `protobuf:"varint,37,opt,name=rgbcolor" json:"rgbcolor,omitempty"`
	Requesturi         bool `protobuf:"varint,38,opt,name=requesturi" json:"requesturi,omitempty"`
	Requesturl         bool `protobuf:"varint,39,opt,name=requesturl" json:"requesturl,omitempty"`
	Ssn                bool `protobuf:"varint,40,opt,name=ssn" json:"ssn,omitempty"`
	Semver             bool `protobuf:"varint,41,opt,name=semver" json:"semver,omitempty"`
	Url                bool `protobuf:"varint,42,opt,name=url" json:"url,omitempty"`
	Utfdugit           bool `protobuf:"varint,43,opt,name=utfdugit" json:"utfdugit,omitempty"`
	Utfletter          bool `protobuf:"varint,44,opt,name=utfletter" json:"utfletter,omitempty"`
	Utfletternumeric   bool `protobuf:"varint,45,opt,name=utfletternumeric" json:"utfletternumeric,omitempty"`
	Utfnumeric         bool `protobuf:"varint,46,opt,name=utfnumeric" json:"utfnumeric,omitempty"`
	Uuid               bool `protobuf:"varint,47,opt,name=uuid" json:"uuid,omitempty"`
	Uuidv3             bool `protobuf:"varint,48,opt,name=uuidv3" json:"uuidv3,omitempty"`
	Uuidv4             bool `protobuf:"varint,49,opt,name=uuidv4" json:"uuidv4,omitempty"`
	Uuidv5             bool `protobuf:"varint,50,opt,name=uuidv5" json:"uuidv5,omitempty"`
	Uppercase          bool `protobuf:"varint,51,opt,name=uppercase" json:"uppercase,omitempty"`
	Variablewidth      bool `protobuf:"varint,52,opt,name=variablewidth" json:"variablewidth,omitempty"`
}

func (m *FieldValidator) Reset()                    { *m = FieldValidator{} }
func (m *FieldValidator) String() string            { return proto.CompactTextString(m) }
func (*FieldValidator) ProtoMessage()               {}
func (*FieldValidator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FieldValidator) GetAscii() bool {
	if m != nil {
		return m.Ascii
	}
	return false
}

func (m *FieldValidator) GetAlpha() bool {
	if m != nil {
		return m.Alpha
	}
	return false
}

func (m *FieldValidator) GetAlphanumeric() bool {
	if m != nil {
		return m.Alphanumeric
	}
	return false
}

func (m *FieldValidator) GetBase64() bool {
	if m != nil {
		return m.Base64
	}
	return false
}

func (m *FieldValidator) GetCidr() bool {
	if m != nil {
		return m.Cidr
	}
	return false
}

func (m *FieldValidator) GetCreditcard() bool {
	if m != nil {
		return m.Creditcard
	}
	return false
}

func (m *FieldValidator) GetDnsname() bool {
	if m != nil {
		return m.Dnsname
	}
	return false
}

func (m *FieldValidator) GetDatauri() bool {
	if m != nil {
		return m.Datauri
	}
	return false
}

func (m *FieldValidator) GetDialstring() bool {
	if m != nil {
		return m.Dialstring
	}
	return false
}

func (m *FieldValidator) GetEmail() bool {
	if m != nil {
		return m.Email
	}
	return false
}

func (m *FieldValidator) GetHexadecimal() bool {
	if m != nil {
		return m.Hexadecimal
	}
	return false
}

func (m *FieldValidator) GetHexcolor() bool {
	if m != nil {
		return m.Hexcolor
	}
	return false
}

func (m *FieldValidator) GetHost() bool {
	if m != nil {
		return m.Host
	}
	return false
}

func (m *FieldValidator) GetIp() bool {
	if m != nil {
		return m.Ip
	}
	return false
}

func (m *FieldValidator) GetIpv4() bool {
	if m != nil {
		return m.Ipv4
	}
	return false
}

func (m *FieldValidator) GetIpv6() bool {
	if m != nil {
		return m.Ipv6
	}
	return false
}

func (m *FieldValidator) GetIsbn10() bool {
	if m != nil {
		return m.Isbn10
	}
	return false
}

func (m *FieldValidator) GetIsbn13() bool {
	if m != nil {
		return m.Isbn13
	}
	return false
}

func (m *FieldValidator) GetIso3166Alpha2() bool {
	if m != nil {
		return m.Iso3166Alpha2
	}
	return false
}

func (m *FieldValidator) GetIso3166Alpha3() bool {
	if m != nil {
		return m.Iso3166Alpha3
	}
	return false
}

func (m *FieldValidator) GetIso693Alpha2() bool {
	if m != nil {
		return m.Iso693Alpha2
	}
	return false
}

func (m *FieldValidator) GetIso693Alpha3B() bool {
	if m != nil {
		return m.Iso693Alpha3B
	}
	return false
}

func (m *FieldValidator) GetIso4217() bool {
	if m != nil {
		return m.Iso4217
	}
	return false
}

func (m *FieldValidator) GetJson() bool {
	if m != nil {
		return m.Json
	}
	return false
}

func (m *FieldValidator) GetLatitude() bool {
	if m != nil {
		return m.Latitude
	}
	return false
}

func (m *FieldValidator) GetLongitude() bool {
	if m != nil {
		return m.Longitude
	}
	return false
}

func (m *FieldValidator) GetLowercase() bool {
	if m != nil {
		return m.Lowercase
	}
	return false
}

func (m *FieldValidator) GetMac() bool {
	if m != nil {
		return m.Mac
	}
	return false
}

func (m *FieldValidator) GetMongoid() bool {
	if m != nil {
		return m.Mongoid
	}
	return false
}

func (m *FieldValidator) GetMultibyte() bool {
	if m != nil {
		return m.Multibyte
	}
	return false
}

func (m *FieldValidator) GetNull() bool {
	if m != nil {
		return m.Null
	}
	return false
}

func (m *FieldValidator) GetNumeric() bool {
	if m != nil {
		return m.Numeric
	}
	return false
}

func (m *FieldValidator) GetPort() bool {
	if m != nil {
		return m.Port
	}
	return false
}

func (m *FieldValidator) GetPrintableascii() bool {
	if m != nil {
		return m.Printableascii
	}
	return false
}

func (m *FieldValidator) GetRfc3339() bool {
	if m != nil {
		return m.Rfc3339
	}
	return false
}

func (m *FieldValidator) GetRfc3339Withoutzone() bool {
	if m != nil {
		return m.Rfc3339Withoutzone
	}
	return false
}

func (m *FieldValidator) GetRgbcolor() bool {
	if m != nil {
		return m.Rgbcolor
	}
	return false
}

func (m *FieldValidator) GetRequesturi() bool {
	if m != nil {
		return m.Requesturi
	}
	return false
}

func (m *FieldValidator) GetRequesturl() bool {
	if m != nil {
		return m.Requesturl
	}
	return false
}

func (m *FieldValidator) GetSsn() bool {
	if m != nil {
		return m.Ssn
	}
	return false
}

func (m *FieldValidator) GetSemver() bool {
	if m != nil {
		return m.Semver
	}
	return false
}

func (m *FieldValidator) GetUrl() bool {
	if m != nil {
		return m.Url
	}
	return false
}

func (m *FieldValidator) GetUtfdugit() bool {
	if m != nil {
		return m.Utfdugit
	}
	return false
}

func (m *FieldValidator) GetUtfletter() bool {
	if m != nil {
		return m.Utfletter
	}
	return false
}

func (m *FieldValidator) GetUtfletternumeric() bool {
	if m != nil {
		return m.Utfletternumeric
	}
	return false
}

func (m *FieldValidator) GetUtfnumeric() bool {
	if m != nil {
		return m.Utfnumeric
	}
	return false
}

func (m *FieldValidator) GetUuid() bool {
	if m != nil {
		return m.Uuid
	}
	return false
}

func (m *FieldValidator) GetUuidv3() bool {
	if m != nil {
		return m.Uuidv3
	}
	return false
}

func (m *FieldValidator) GetUuidv4() bool {
	if m != nil {
		return m.Uuidv4
	}
	return false
}

func (m *FieldValidator) GetUuidv5() bool {
	if m != nil {
		return m.Uuidv5
	}
	return false
}

func (m *FieldValidator) GetUppercase() bool {
	if m != nil {
		return m.Uppercase
	}
	return false
}

func (m *FieldValidator) GetVariablewidth() bool {
	if m != nil {
		return m.Variablewidth
	}
	return false
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*FieldValidator)(nil),
	Field:         49210,
	Name:          "govalidator.field",
	Tag:           "bytes,49210,opt,name=field",
	Filename:      "govalidator.proto",
}

func init() {
	proto.RegisterType((*FieldValidator)(nil), "govalidator.FieldValidator")
	proto.RegisterExtension(E_Field)
}

func init() { proto.RegisterFile("govalidator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0x4d, 0x93, 0xdb, 0x44,
	0x10, 0xad, 0x6c, 0x76, 0x37, 0xce, 0x38, 0x31, 0x9b, 0x21, 0x84, 0xc6, 0xf9, 0xc0, 0x2c, 0x21,
	0x84, 0x80, 0xe5, 0xd8, 0xf2, 0x9a, 0x5a, 0x8e, 0x1c, 0xa0, 0x38, 0x51, 0xe5, 0x03, 0x07, 0x6e,
	0x23, 0x69, 0x2c, 0x0f, 0x35, 0xd2, 0x88, 0x99, 0x91, 0xbd, 0x70, 0xe2, 0xe7, 0xf0, 0x1b, 0xf8,
	0x75, 0x54, 0x4f, 0x4b, 0xb2, 0xbc, 0x9b, 0x93, 0xfb, 0xbd, 0xd7, 0x7a, 0x35, 0xdd, 0x3d, 0x3d,
	0x66, 0x4f, 0x72, 0xb3, 0x13, 0x5a, 0x65, 0xc2, 0x1b, 0x1b, 0x55, 0xd6, 0x78, 0xc3, 0x87, 0x3d,
	0x6a, 0x3c, 0xc9, 0x8d, 0xc9, 0xb5, 0x9c, 0x05, 0x29, 0xa9, 0x37, 0xb3, 0x4c, 0xba, 0xd4, 0xaa,
	0xaa, 0x4b, 0xbf, 0xfc, 0x77, 0xc8, 0x46, 0x3f, 0x29, 0xa9, 0xb3, 0xdf, 0xda, 0x8f, 0xf8, 0x53,
	0x76, 0x26, 0x5c, 0xaa, 0x14, 0xdc, 0x9b, 0xdc, 0x7b, 0x3b, 0x58, 0x13, 0x08, 0xac, 0xae, 0xb6,
	0x02, 0x4e, 0x1a, 0x16, 0x01, 0xbf, 0x64, 0x8f, 0x42, 0x50, 0xd6, 0x85, 0xb4, 0x2a, 0x85, 0xfb,
	0x41, 0x3c, 0xe2, 0xf8, 0x33, 0x76, 0x9e, 0x08, 0x27, 0x57, 0x4b, 0x38, 0x0d, 0x6a, 0x83, 0x38,
	0x67, 0xa7, 0xa9, 0xca, 0x2c, 0x9c, 0x05, 0x36, 0xc4, 0xfc, 0x15, 0x63, 0xa9, 0x95, 0x99, 0xf2,
	0xa9, 0xb0, 0x19, 0x9c, 0x07, 0xa5, 0xc7, 0x70, 0x60, 0x0f, 0xb2, 0xd2, 0x95, 0xa2, 0x90, 0xf0,
	0x20, 0x88, 0x2d, 0x0c, 0x8a, 0xf0, 0xa2, 0xb6, 0x0a, 0x06, 0x8d, 0x42, 0x10, 0x3d, 0x33, 0x25,
	0xb4, 0xf3, 0x56, 0x95, 0x39, 0x3c, 0x24, 0xcf, 0x03, 0x83, 0x95, 0xc9, 0x42, 0x28, 0x0d, 0x8c,
	0x2a, 0x0b, 0x80, 0x4f, 0xd8, 0x70, 0x2b, 0x6f, 0x44, 0x26, 0x53, 0x55, 0x08, 0x0d, 0xc3, 0xa0,
	0xf5, 0x29, 0x3e, 0x66, 0x83, 0xad, 0xbc, 0x49, 0x8d, 0x36, 0x16, 0x1e, 0x05, 0xb9, 0xc3, 0x58,
	0xdb, 0xd6, 0x38, 0x0f, 0x8f, 0xa9, 0x36, 0x8c, 0xf9, 0x88, 0x9d, 0xa8, 0x0a, 0x46, 0x81, 0x39,
	0x51, 0x15, 0xe6, 0xa8, 0x6a, 0xb7, 0x84, 0x8f, 0x28, 0x07, 0xe3, 0x86, 0x5b, 0xc1, 0x45, 0xc7,
	0xad, 0xb0, 0x7f, 0xca, 0x25, 0xe5, 0xfc, 0x3d, 0x3c, 0xa1, 0xfe, 0x11, 0xea, 0xf8, 0x18, 0x78,
	0x8f, 0x8f, 0xf9, 0x6b, 0xf6, 0x58, 0x39, 0x13, 0xcf, 0x57, 0xab, 0x30, 0x86, 0x05, 0x7c, 0x1c,
	0xe4, 0x63, 0xf2, 0x76, 0x56, 0x0c, 0x4f, 0xef, 0x66, 0xc5, 0x38, 0x5f, 0xe5, 0xcc, 0xea, 0x3a,
	0x6e, 0xac, 0x3e, 0xa1, 0xf9, 0xf6, 0xb9, 0xc6, 0xa9, 0xc5, 0x71, 0x02, 0xcf, 0x3a, 0xa7, 0x03,
	0x89, 0xf3, 0x51, 0xce, 0x2c, 0x17, 0xf3, 0xef, 0xe1, 0x53, 0x9a, 0x4f, 0x03, 0xb1, 0xe6, 0x3f,
	0x9c, 0x29, 0x01, 0xa8, 0x66, 0x8c, 0xb1, 0xb7, 0x5a, 0x78, 0xe5, 0xeb, 0x4c, 0xc2, 0x67, 0xd4,
	0xdb, 0x16, 0xf3, 0x17, 0xec, 0xa1, 0x36, 0x65, 0x4e, 0xe2, 0x38, 0x88, 0x07, 0x82, 0xd4, 0xbd,
	0xb4, 0xa9, 0x70, 0x12, 0x9e, 0xb7, 0x6a, 0x43, 0xf0, 0x0b, 0x76, 0xbf, 0x10, 0x29, 0xbc, 0x08,
	0x3c, 0x86, 0x78, 0xae, 0xc2, 0x94, 0xb9, 0x51, 0x19, 0xbc, 0xa4, 0x73, 0x35, 0x10, 0x9d, 0x8a,
	0x5a, 0x7b, 0x95, 0xfc, 0xe5, 0x25, 0xbc, 0x22, 0xa7, 0x8e, 0xc0, 0x53, 0x97, 0xb5, 0xd6, 0xf0,
	0x39, 0x9d, 0x1a, 0x63, 0xf4, 0x6a, 0x17, 0x61, 0x42, 0x5e, 0xed, 0x0e, 0x70, 0x76, 0x5a, 0x19,
	0xeb, 0xe1, 0x0b, 0xca, 0xc6, 0x98, 0xbf, 0x61, 0xa3, 0xca, 0xaa, 0xd2, 0x8b, 0x44, 0x4b, 0x5a,
	0xb8, 0xcb, 0xa0, 0xde, 0x62, 0xd1, 0xd5, 0x6e, 0xd2, 0x38, 0x8e, 0xaf, 0xe1, 0x4b, 0x72, 0x6d,
	0x20, 0x8f, 0x18, 0x6f, 0xc2, 0xbd, 0xf2, 0x5b, 0x53, 0xfb, 0xbf, 0x4d, 0x29, 0xe1, 0x75, 0x48,
	0xfa, 0x80, 0x82, 0x5d, 0xb5, 0x79, 0x42, 0x37, 0xf6, 0x2b, 0xea, 0x6a, 0x8b, 0x71, 0x4b, 0xac,
	0xfc, 0xb3, 0x96, 0xce, 0xe3, 0x0a, 0xbd, 0xa1, 0x2d, 0x39, 0x30, 0x47, 0xba, 0x86, 0xaf, 0x6f,
	0xe9, 0x1a, 0x3b, 0xeb, 0x5c, 0x09, 0x6f, 0xa9, 0xb3, 0xce, 0x95, 0x78, 0x3f, 0x9d, 0x2c, 0x76,
	0xd2, 0xc2, 0x37, 0x74, 0x3f, 0x09, 0x61, 0x26, 0x5a, 0xbc, 0xa3, 0x4c, 0xfc, 0x76, 0xcc, 0x06,
	0xb5, 0xdf, 0x64, 0x75, 0xae, 0x3c, 0x7c, 0x4b, 0xe7, 0x6a, 0x31, 0x4e, 0xa1, 0xf6, 0x1b, 0x2d,
	0xbd, 0x97, 0x16, 0xbe, 0xa3, 0x29, 0x74, 0x04, 0x7f, 0xc7, 0x2e, 0x3a, 0xd0, 0xb6, 0x7e, 0x1a,
	0x92, 0xee, 0xf0, 0x58, 0x41, 0xed, 0x37, 0x6d, 0x56, 0x44, 0x15, 0x1c, 0x18, 0x9c, 0x51, 0x5d,
	0xab, 0x0c, 0x66, 0x34, 0x23, 0x8c, 0xb1, 0x06, 0xfc, 0xdd, 0xc5, 0xf0, 0x9e, 0x6a, 0x20, 0xd4,
	0xf1, 0x4b, 0x98, 0xf7, 0xf8, 0x65, 0xc7, 0x5f, 0xc1, 0xa2, 0xc7, 0x5f, 0x85, 0x2a, 0xaa, 0xaa,
	0xb9, 0x95, 0x71, 0x53, 0x45, 0x4b, 0xe0, 0x06, 0xed, 0x84, 0x55, 0x38, 0xf2, 0xbd, 0xca, 0xfc,
	0x16, 0x96, 0xb4, 0x41, 0x47, 0xe4, 0x0f, 0x6b, 0x76, 0xb6, 0xc1, 0x97, 0x9a, 0xbf, 0x8c, 0xe8,
	0x59, 0x8f, 0xda, 0x67, 0x3d, 0x0a, 0x2f, 0xf8, 0xaf, 0x95, 0x57, 0xa6, 0x74, 0xf0, 0xdf, 0x3f,
	0xf8, 0x0a, 0x0f, 0x17, 0xcf, 0xa3, 0xfe, 0xbf, 0xc3, 0xf1, 0x23, 0xbf, 0x26, 0xab, 0x1f, 0x7f,
	0xf9, 0xfd, 0xe7, 0x5c, 0xf9, 0x6d, 0x9d, 0x44, 0xa9, 0x29, 0x66, 0x6b, 0x51, 0xe6, 0x52, 0xaf,
	0xa5, 0xd0, 0x72, 0xb6, 0x09, 0xe6, 0xd3, 0xbd, 0x15, 0xd5, 0xb4, 0x73, 0x99, 0xf6, 0x1c, 0x67,
	0xb9, 0x41, 0x71, 0x96, 0xef, 0xe9, 0x18, 0xe7, 0xe1, 0x27, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0xf8, 0xc3, 0x58, 0xe3, 0x94, 0x06, 0x00, 0x00,
}
